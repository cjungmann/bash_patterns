#!/usr/bin/env bash

source sources/small_stuff
source sources/keypress
source sources/list_ui
source sources/csv_file
source sources/block_text

declare csi=$'\e['

# Date example used throughout this demo
declare DStr=$( date )

# This script will apply regular expressions to the output of various
# and sundry commands.  In most cases, there are MUCH more efficient
# methods to extract information, but in the interest of demonstrating
# more complicated expressions, we work with verbose and otherwise
# challenging strings.

# There are multiple versions of regular expressions.  The two basic
# flavors are Perl and Posix.
#
# The BASH =~ operator in [[ ]] uses the Posix flavor of regular
# expressions.  This syntax is documentated in man(7) regex.
#
# GREP uses the PCRE (Perl-compatible regular expressions).
# PCRE is documented in man(3) pcresyntax and man(3) pcrepattern

to_continue() { read -n1 -p "Press any key to continue."; }

show_funcname()
{
    fname="$1"
    echo -n "[2J[1;1H"
    echo "Running function [1;36m$fname[0m"
    echo
}

# Often used display of a successful match:
show_matches()
{
    echo "matched, group matches are:"
    printf "'%s'\n" "${BASH_REMATCH[@]}"
}


# It is considered a best practice to assign the regular expression
# to a variable, then use the variable with the [[ =~ ]] operators.
#
# It is important to refer to the regular expression variable
# WITHOUT QUOTES.
canonical_extract_time()
{
    show_funcname "$FUNCNAME"

    local rePosix='([[:digit:]]{2}):([[:digit:]]{2}):([[:digit:]]{2})'

    echo "Using ${csi}36;1m${rePosix}${csi}m to parse date string"
    echo "${csi}36;1m${DStr}${csi}m"
    echo

    if [[ "$DStr" =~ $rePosix ]]; then
        show_matches
    else
        echo "Posix Not matched"
    fi

    to_continue
}


# Sometimes I prefer to directly use the regular expression.
#
# Attempt to extract data using a raw regular expression, that is
# to put the expression directly in the [[ =~ ]] expression,
# without an intermediary variable.  Notice that neither of the
# regular expressions required escaping any characters, not the
# '(', '[', nor '{'.
raw_extract_time()
{
    show_funcname "$FUNCNAME"

    echo "Grouped quantified numbers (the minutes and seconds of the time)"
    echo "Notice that the minutes value is not isolated in the BASH_REMATCH"
    echo "array."
    echo

    if [[ "$DStr" =~ ([[:digit:]]{2})((:([[:digit:]]{2})){2}) ]]; then
        show_matches
    else
        echo "Not matched"
    fi

    echo
    echo "Explicitly matching each of the time components makes all"
    echo "time components available in the BASH_REMATCH array."
    echo

    if [[ "$DStr" =~ ([[:digit:]]{2}):([[:digit:]]{2}):([[:digit:]]{2}) ]]; then
        echo "matched, group matches:"
        printf "'%s'\n" "${BASH_REMATCH[@]}"
    else
        echo "Not matched"
    fi

    to_continue
}

# Using an array to document and build a full regular expression
canonical_extract_date()
{
    show_funcname "$FUNCNAME"

    # Note that in the following array, I'm using a space character class [[:space:]]
    # instead of a space character.  This is done because if the array is used directly,
    # the space thus does not need to be escaped.  Once it is accepted that the first
    # example fails, the [[:space:]] array elements could be replaced with ' '.

    local -a rearr=(
        # Ignoring characters in front of the month

        # Handle either abbreviated or full-length month names
        # Two groups, use #1 for full match, group #2 for abbreviation.
        # $BASH_REMATCH[1] for abbreviated name
        # $BASH_REMATCH[2] for possibly longer full-length name
        '((Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[^[:space:]]*)'

        # match, but discard space
        '[[:space:]]'

        # match and preserve the day-of-the-month:
        # group/index 3 (ie $BASH_REMATCH[3} )
        '([[:digit:]]{2})'

        # match and discard the content before the year
        '[[:space:]]'
        '[[:digit:]:]+'
        '.*'

        # match and preserve the year
        # ( ${BASH_REMATCH[4]} )
        '([[:digit:]]{4})'
    )

    # Remove IFS setting to join the array elements
    # with no joining characters.
    local IFS=

    echo "Attempt to use joined array directly as the regexp:"
    if [[ "$DStr" =~ "${rearr[*]}" ]]; then
        show_matches
    else
        echo "Not matched"
    fi

    echo
    echo "Join the regex first, then use joined string:"
    local joined="${rearr[*]}"
    echo "[1;36m$joined[0m"
    if [[ "$DStr" =~ $joined ]]; then
        show_matches
    else
        echo "Not matched"
    fi

    to_continue
}

# In the raw expression, the only escaped characters are the spaces.
raw_extract_date()
{
    show_funcname "$FUNCNAME"

    if [[ "$DStr" =~ ([[:alpha:]]+)\ ([[:digit:]]{2})\ .*\ ([[:digit:]]{4})$ ]]; then
        show_matches
    else
        echo "Not matched"
    fi

    to_continue
}

# Contrived example to demonstrate a grep regular expression
# Notice that the entire regular expression is unescaped.
# I couldn't get the {1,} notation to work, but then the * 
# synonym worked, anyway.
grep_unescaped()
{
    local -i Cat_One=1
    local -i Cat_Two=2
    Cat_Three() { echo "hi"; }
    local -i Cat_Four=4
    local -a Cat_Five=( 1 2 3 4 5 )

    local -a raw_vars=( $( set -o posix; set | grep ^Cat_[[:alpha:]_]*=[[:digit:]]*$ - ) )
    echo "This is confusing.  There are ${#raw_vars} matching"
    echo "items, but when we print them out, there are only three:"
    echo
    local IFS=$'\n'
    echo "${raw_vars[*]}"

    to_continue
}

compare_posix_vs_pcre()
{
    declare target="I show an asterisk (*), a plus (+) and a dollar sign ($)."

    declare -a paras
    bind_paragraphs "paras" <<EOF
This demo will use ${csi}37;1mgrep${csi}m with different flags
to demonstrate how the regex flavor accects that matches a given
regular expression makes.

The target string for all of the tests is:

${csi}36;1m${target}${csi}m
EOF

    declare -a lines
    format_paragraphs "lines" "paras" 70

    local -a regexes=(
        2 0
        "Find a dollar sign in apostrophes"           '$'
        "Find an escaped dollar sign in apostrophes"  '\$'
        "Find a period in apostrophes"                '.'
        "Find an escaped period in apostrophes"       '\.'
        "Find a plus in apostrophes"                  '+'
        "Find an escaped plus in apostrophes"         '\+'
        "Find a parenthesis in apostrophes"           '('
        "Find an escaped parenthesis in apostrophes"  '\('
        )
    lui_list_init "regexes"

    doit()
    {
        local -i ndx="$1"
        local descrip="$2"
        local regex="$3"

        echo "Running test ${csi}37;1m${descrip}${csi}m"
        echo
        echo "Using regex: ${csi}36;1m${regex}${csi}m on target:"
        echo "${csi}37;1m${target}${csi}m"
        echo
        to_continue

        echo "${csi}33;1mgrep with BRE:${csi}m"
        grep -os $regex <<< "$target"
        to_continue
        echo "${csi}33;1mgrep with ERE:${csi}m"
        grep -E -os $regex <<< "$target"
        to_continue
        echo "${csi}33;1mgrep with PCRE:${csi}m"
        grep -P -os $regex <<< "$target"
        echo

        to_continue
        reset_screen
    }


    lui_list_iterate "regexes" "doit"
}

declare csi=$'\e['

declare -a HEADER_PARAS
bind_paragraphs "HEADER_PARAS" <<EOF
This test script runs experiments with regular expressions
in order to better understand their construction in different
settings and flavors.

The string representation of today's date, ${csi}36;1m${DStr}${csi}m,
be used for some of the tests.
EOF


declare -a MAIN_MENU=(
    2 0
    "compare posix vs pcre"       compare_posix_vs_pcre
    "test canonical_extract_time" canonical_extract_time
    "test raw_extract_time"       raw_extract_time
    "test raw_extract_date"       raw_extract_date
    "test unescaped grep"         grep_unescaped
)
lui_list_init "MAIN_MENU"

lui_list_runner "MAIN_MENU" "HEADER_PARAS"
