#!/usr/bin/env bash

source list_selector

# Simplest example: select one item from an array,
# function select_from_list() writes the selection
# index in the variable whose name is passed as the
# first parameter.

declare -a KEYS=(
    zero one  two   three  four  five  six  seven  eight  nine
    ten  eleven  twelve  thirteen  fourteen
    fifteen  sixteen  seventeen  eighteen nineteen
    twenty twenty-one  twenty-two   twenty-three  twenty-four
    twenty-five twenty-six  twenty-seven  twenty-eight  twenty-nine
    thirty thirty-one  thirty-two   thirty-three  thirty-four
    thirty-five  thirty-six  thirty-seven  thirty-eight  thirty-nine
    forty forty-one  forty-two   forty-three  forty-four
    forty-five  forty-six  forty-seven  forty-eight  forty-nine
    fifty
)

make_simple_number_list()
{
    local -i ndx
    if select_from_list "ndx" "KEYS" 10; then
        echo "You selected index $ndx"
    else
        echo "You neglected to select an item"
    fi
}



# Example with customized line displays.

# Collect information from environment variable LS_COLORS,
# creating an item array (keys) and an associative array
# mapping the key to a color string.
# Args
#    (string):    name of items array
#    (string):    name of LS_COLORS map
prepare_list()
{
   local -n keys="$1"
   local -n map="$2"
   local IFS=':'
   local -a raw=( $LS_COLORS )

   local item key value

   IFS=$'='
   for item in "${raw[@]}"; do
       entry=( $item )
       key="${entry[0]}"
       value="${entry[1]}"
       keys+=( $key )
       map[$key]="$value"
   done
}

# Custom *list_print_item* function.  This function is an example
# of extra parameters passed to *select_from_list* being passed on
# to the *list_print_item* function for custom rendering of display
# lines.
# Required Args:
#   (string):   name of array of keys
#   (integer):  index of array's element that is to be displayed
#   (integer):  selection flag, 0 if selected, non-zero if not selected
# Ad hoc Arg:
#   (string):   name of associative array of file types and display colors
ls_color_list_print_item()
{
    local -n larray="$1"
    local -i index="$2"
    local -i selected="$3"

    local -n lmap="$4"

    local key="${larray[$index]}"
    local value="${lmap[$key]}"

    if [ "$selected" -eq 0 ]; then
        echo -n "[32;1m   "
    else
        echo -n "   "
    fi

    printf "%s: %s" "$key" "$value"

    echo "[m"
}

# Run the LS_COLORS example.  No arguments
make_ls_colors_list()
{
    local -i ndx
    local -a LS_KEYS
    local -A LS_MAP

    local -a args=(
        "ndx"                       # name of variable in which the result will be stored
        "LS_KEYS"                   # name of array to hold key names
        20                          # number of lines in scroll "window"
        "ls_color_list_print_item"  # optional: replacement list_print_item function
        "LS_MAP"                    # extra parameter passed to print function
    )

    prepare_list "LS_KEYS" "LS_MAP"
    while [ 1 -eq 1 ]; do
        if select_from_list "${args[@]}"; then
            echo "You selected position $ndx,  key ${LS_KEYS[$ndx]}, value ${LS_MAP[${LS_KEYS[$ndx]}]}"
            break
        else
            echo "Aborted"
            break
        fi
    done
}


# # List of numbers to test scrolling and selection:
# make_simple_number_list

# Make a list from an environment variable, using non-trivial options
make_ls_colors_list
