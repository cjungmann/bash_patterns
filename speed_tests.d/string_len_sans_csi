#! -*- mode: sh; sh-shell: bash -*-

to_continue() { read -n1 -p "Press any key to continue."; }

# Returns print length of string, having subtracted CSI values from total characters.
#
# Args
#    (string):    string for which the count is needed
#
# Returns
#    (echo) printed length of string
string_len_sans_csi_echo()
{
    local raw="$1"
    local rawlen="${#raw}"
    local c
    local in_esc=0
    local in_csi=0
    local count=0
    for (( i=0; i<rawlen; ++i )); do
        c="${raw:$i:1}"

        if (( in_csi )); then
            # CSI strings terminate with letter,
            # or ']' (linux private CSI sequences)
            # or '`' (HPA cursor placement instruction)
            if [[ "$c" =~ [\]\`[:alpha:]] ]]; then
                (( in_csi = in_esc = 0 ))
            fi
        elif (( in_esc == 1 )); then
            if [ "$c" == '[' ]; then
                in_csi=1
            else
                echo "Oops: escape followed by non-'[' character ($c)" >&2
                exit 1
            fi
        elif [ "$c" == $'\e' ]; then
            in_esc=1
        else
            (( ++count ));
        fi
    done

    echo "$count"
}

# 
string_len_sans_csi_nameref()
{
    local -n slscf_len="$1"
    local raw="$1"

    local c
    local in_esc=0
    local in_csi=0
    slscf_len=0
    while IFS= read -rn1 c && [ "$c" != $'\0' ]; do
        if (( in_csi )); then
            # CSI strings terminate with letter,
            # or ']' (linux private CSI sequences)
            # or '`' (HPA cursor placement instruction)
            if [[ "$c" =~ [\]\`[:alpha:]] ]]; then
                (( in_csi = in_esc = 0 ))
            fi
        elif (( in_esc == 1 )); then
            if [ "$c" == '[' ]; then
                in_csi=1
            else
                echo "Oops: escape followed by non-'[' character ($c)" >&2
                exit 1
            fi
        elif [ "$c" == $'\e' ]; then
            in_esc=1
        else
            (( ++slscf_len ));
        fi
    done <<< "$raw"

    return 0
}

time_echo()
{
    local -n ts_paras="$1"
    local -n ts_lines="$2"

    local -i time_start time_elapsed
    local snippet
    local -i snippet_len total_len=0

    echo "Running echo test with paragraphs."

    time_start=$( get_time_in_tenthous )
    for snippet in "${ts_paras[@]}"; do
        snippet_len=$( string_len_sans_csi_echo "$snippet" )
        (( total_len += snippet_len ))
    done
    time_elapsed=$(( $( get_time_in_tenthous ) - time_start ))

    echo -n "Elapsed time counting display characters with paragraphs: "
    show_tenthous_as_floating_seconds "$time_elapsed"


    echo "Running standard test with lines."

    time_start=$( get_time_in_tenthous )
    for snippet in "${ts_lines[@]}"; do
        snippet_len=$( string_len_sans_csi_echo "$snippet" )
        (( total_len += snippet_len ))
    done
    time_elapsed=$(( $( get_time_in_tenthous ) - time_start ))

    echo -n "Elapsed time counting display characters with lines: "
    show_tenthous_as_floating_seconds "$time_elapsed"
}

time_nameref()
{
    local -n ts_paras="$1"
    local -n ts_lines="$2"

    local -i time_start time_elapsed
    local snippet
    local -i snippet_len total_len=0

    echo "Running 'nameref' test with paragraphs."

    time_start=$( get_time_in_tenthous )
    for snippet in "${ts_paras[@]}"; do
        string_len_sans_csi_nameref "snippet_len" "$snippet"
        (( total_len += snippet_len ))
    done
    time_elapsed=$(( $( get_time_in_tenthous ) - time_start ))

    echo -n "Elapsed time counting display characters with paragraphs: "
    show_tenthous_as_floating_seconds "$time_elapsed"


    echo "Running 'nameref' test with lines."

    time_start=$( get_time_in_tenthous )
    for snippet in "${ts_lines[@]}"; do
        string_len_sans_csi_nameref "snippet_len" "$snippet"
        (( total_len += snippet_len ))
    done
    time_elapsed=$(( $( get_time_in_tenthous ) - time_start ))

    echo -n "Elapsed time counting display characters with lines: "
    show_tenthous_as_floating_seconds "$time_elapsed"
    echo
    echo
}

count_array_elements()
{
    local -n cae_array="$1"
    echo "${#cae_array[@]}"
}

declare -a TEST_STRINGS
declare speech_path="speed_tests.d/roosevelt.txt"x

generate_test_strings()
{
    local paras_name="$1"
    local lines_name="$2"
    local text_path="$3"
    local -i line_limit=70
    local -i els_count

    echo "Binding into paragraphs"
    bind_paragraphs "$paras_name" < "$text_path"
    els_count=$( count_array_elements "$paras_name" )
    echo "Formatting $els_count paragraphs into lines of $line_limit characters or less."

    local -a lines
    format_paragraphs "$lines_name" "$paras_name" "$line_limit"
    els_count=$( count_array_elements "$lines_name" )
    echo "There are $els_count lines in the formatted speech."
    echo
    echo
}

string_len_sans_csi_main()
{
    local -a paras lines
    generate_test_strings "paras" "lines" "$speech_path"
    time_echo "paras" "lines"
    time_nameref "paras" "lines"
}
