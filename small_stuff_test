#!/usr/bin/env bash

source sources/small_stuff

# For interface
source sources/list_ui
source sources/keypress

declare -a HL_TEST=(
    "one"         "_"    "na"
    "_one"        "_"    0
    "o_ne"        "_"    1
    "tw_enty-one" "_"    2
    "tw_enty_one" "_"    2
    "home game"   "home" 0
)

declare ACOL=$'\e[48;5;236m'

to_continue() { read -n1 -p $'\nPress any key to continue.'; }
to_return() { read -n1 -p $'\nPress any key to return to the main menu.'; }


test_strstrndx()
{
    local -a test
    local -i pos
    local result

    echo
    echo "Testing 'strstrndx' function, echos position, returns true or false"

    for el in "${HL_TEST[@]}"; do
        test+=( "$el" )
        if [ "${#test[@]}" -eq 3 ]; then
            echo -n "Test, seeking '${test[1]} in '${test[0]}', expecting ${test[2]} "
            if pos=$( strstrndx "${test[0]}" "${test[1]}" ); then
                result="$pos"
            else
                result="na"
            fi

            if [ "$result" == "${test[2]}" ]; then
                echo $'\e[42mPassed!\e[m'
            else 
                echo $'\e'"[41mFailed!  It was ${result}."$'\e[m'
            fi

            test=()
        fi
    done

    return 0
}

test_hilite_substr()
{
    local -a test

    echo
    echo "Testing 'hilite_substr' function.  Hilites substring, if found"

    for el in "${HL_TEST[@]}"; do
        test+=( "$el" )
        if [ "${#test[@]}" -eq 3 ]; then
            echo -n "Test: hiliting '${test[1]} in '${test[0]}'  $ACOL"
            hilite_substr "${test[0]}" "${test[1]}"
            echo $'\e[m'
            test=()
        fi
    done

    to_return

    return 0
}

test_hilite_pad()
{
    local -a test

    echo
    echo "Testing 'hilite_pad' function.  Skips first underscore and hilites character after underscore, if found."

    for el in "${HL_TEST[@]}"; do
        test+=( "$el" )
        if [ "${#test[@]}" -eq 3 ]; then
            echo -n "Test hiliting letter after '${test[1]} in '${test[0]}'   $ACOL"
            hilite_pad "${test[0]}" 15
            echo $'\e[m'
            test=()
        fi
    done

    to_return

    return 0
}

test_heredoc_paragraphs()
{
    local -a paragraphs
    bind_paragraphs "paragraphs" <<EOF
Once this test is passed, I expect I will retrofit
many if not all calls to lui_list_generic() to include
a header to explain the purpose of each list.

I'll likely keep this test around, despite subsequent
plentiful examples of its fitness for duty.

Just consider it an artifact of development that indulged
my need for a multiple paragraph formatting exercise.
EOF

    local -a format_paras
    format_paragraphs "format_paras" "paragraphs" 60 5

    local line
    for line in "${format_paras[@]}"; do
        echo "$line"
    done

    to_return

    return 0
}

test_markdown_paragraphs()
{
    local -a paragraphs
    bind_paragraphs "paragraphs" < README.md

    local -a formatted
    format_paragraphs "formatted" "paragraphs" 60

    local line
    for line in "${formatted[@]}"; do
        echo "$line"
    done

    to_return

    return 0
}


test_indent_print()
{
    local -a lines=(
        "This is the first line of a block print area."
        "This is the second line of a block print area."
        "This is the third line of a block print area."
        "This is the fourth line of a block print area."
        "This is the fifth line of a block print area."
        "This is the sixth line of a block print area."
    )

    indent_print "lines" 10 10

    to_return

    return 0
}

# Print simple two-line ruler to compare with line output
# Args
#    (integer):   Characters in ruler
print_ruler()
{
    local -i length="$1"

    local con=$'\e[33;1m'
    local coff=$'\e[m'

    local str_1=""
    local str_10=""
    for (( count=0, i=0; i<length; ++count, i+=10 )); do
        str_1="${str_1}0123456789"
        str_10="${str_10}${count}         "
        # str="${str}${con}0${coff}123456789"
    done

    echo "${str_10:0:$length}"
    echo "${str_1:0:$length}"
}

test_string_len_sans_csi()
{
    echo "Testing several string combinations against new function."

    local -a words=(
        $'\e[43;31mword[m'
        $'\e[38;2;255;128;0;48;2;63;63;255mword\e[m'
    )

    local word tword
    local -i wlen
    for word in "${words[@]}"; do
        tword=$( print_keystroke "$word" )
        wlen=$( string_len_sans_csi "$word" )
        echo "$word ($tword): $wlen characters"
    done

    to_return

    return 0
}

test_csi_aware_paragraphs()
{
    local FUNC_COLOR=$'\e[34;1m'
    local DEF_COLOR=$'\e[35;1m'
    local END_COLOR=$'\e[m'

    local -a paragraphs
    bind_paragraphs "paragraphs" <<EOF
The following list includes ${FUNC_COLOR}functions${END_COLOR} and
${DEF_COLOR}topic headings${END_COLOR}.  Move the selection with arrow
or page keys, read an entry by pressing ENTER.

This second paragraph is included in the test function to further
stress bind_paragraphs().
EOF

    local -a lines
    local -i length=60
    format_paragraphs "lines" "paragraphs" "$length"

    echo "There are ${#paragraphs[@]} paragraphs in the heredoc"
    echo "There are ${#lines[@]} lines in the formatted result."
    echo

    local line
    for line in "${lines[@]}"; do
        echo "$line"
    done
    print_ruler "$length"

    to_continue

    return 0
}

test_get_screen_size()
{
    local -i row="${1:-50}"
    local -i col="${2:-50}"

    local -i srows scols

    echo -ne $'\e['"${row};${col}H" >&2
    # set_cursor_position "$row" "$col"
    echo "Printing text at row $row and column $col." >&2
    get_cursor_position "srows" "scols" 
    echo >&2
    echo "set_cursor_position -> get_cursor_position returns $srows rows and $scols columns." >&2

    get_screen_size "srows" "scols"
    echo "get_screen_size returns $srows rows and $scols columns." >&2
    to_continue
    return 0
}

test_subshell_console_codes()
{
    reset_screen
    # echo "The first test executes 'test_set_screen_size' directly."
    # test_get_screen_size 25 50
    # echo "The second test executes 'test_set_screen_size' in a subshell."
    # local result=$( test_get_screen_size 30 50 )

    local -i srow=25 scol=50

    local -i grow gcol

    echo "Testing set_cursor_position to row $srow and column $scol"
    set_cursor_position "$srow" "$scol"
    echo -n "See where I printed."
    grow=0 gcol=0
    get_cursor_position "grow" "gcol"
    echo ", ending at $grow/$gcol"

    echo
    (( srow += 5 ))
    echo "Testing set_cursor_position in subshell to row $srow and column $scol"
    result=$( set_cursor_position "$srow" "$scol" )
    echo -n "See where I printed, and result has ${#result} characters."
    grow=0 gcol=0
    result=$( get_cursor_position "grow" "gcol" )
    echo ", ending at $grow/$gcol (result has ${#result} characters)"

    to_continue

    return 0
}

test_variable_validation()
{
    local -i intvar
    echo "Testing named_var_exists."
    if named_var_exists "intvar"; then
        echo "expected positive result is positive."
    else
        echo "expected positive result is negative."
    fi
    if named_var_exists "int_var"; then
        echo "expected negative result is positive."
    else
        echo "expected negative result is negative."
    fi

    local -a myarr
    echo "Testing named_var_is_array."
    if named_var_is_array "myarr"; then
        echo "expected positive result is positive."
    else
        echo "expected positive result is negative."
    fi
    local my_non_arr=1
    if named_var_is_array "my_non_arr"; then
        echo "expected negative result is positive."
    else
        echo "expected negative result is negative."
    fi

    local -i myint
    echo "Testing named_var_is_int."
    if named_var_is_int "myint"; then
        echo "expected positive result is positive."
    else
        echo "expected positive result is negative."
    fi
    local my_non_int=1
    if named_var_is_int "my_non_int"; then
        echo "expected negative result is positive."
    else
        echo "expected negative result is negative."
    fi

    to_continue
}

test_in_cent_ivize()
{
    local -a values=(
        "-\$12,345.67"
        "\$9,876.54"
        "\$100"
    )
    local -i result

    local val
    for val in "${values[@]}"; do
        in_cent_ivize "result" "$val"
        echo "$val was converted to $result"
    done

    to_continue
}

##############
#    MAIN    #
##############

main_menu()
{
    run_test()
    {
        local -a row=()
        lui_list_copy_row "row" "$2" "$3"

        reset_screen

        # Execute the command
         "${row[1]}"
         local -i cmd_result="$?"

        reset_screen

        return "$cmd_result"
    }

    local -a paragraphs
    bind_paragraphs "paragraphs" <<EOF
This script exists to make it easy to create a collection of test
that are easy to access and save.  It also serves as a simple demonstration
of the list_ui script.
EOF

    local -a keylist=(
        $'\e|q:LUI_ABORT'
        $'\n:run_test'
    )

    local -i selection=0
    local -i maxlen=$( lui_list_max_len "MAIN_MENU" )
    if [ "$maxlen" -lt 60 ]; then
        maxlen=60
    fi

    local list_args=(
        "selection"           # name of selection variable
        "MAIN_MENU"           # name of lui_list
        0 0                   # row, column to zero for centering
        "${#MAIN_MENU[@]}"    # size of list in lines (ysize)
        "$maxlen"             # size of list in characters (xsize)
        ""                    # use default line displayer
        "keylist"             # name of keystroke functions list
        "paragraphs"          # name of header paragraphs array
    )

    reset_screen
    lui_list_generic "${list_args[@]}"
}


declare -a MAIN_MENU=(
    2 0
    "test variable validation"           test_variable_validation
    "test string len sans csi"           test_string_len_sans_csi
    "test strstrndx"                     test_strstrndx
    "test hilite substring"              test_hilite_substr
    "test hilite pad"                    test_hilite_pad
    "test paragraph-formatting heredoc"  test_heredoc_paragraphs
    "test paragraph-formatting markdown" test_markdown_paragraphs
    "test indent_print"                  test_indent_print
    "test CSI aware paragraphs"          test_csi_aware_paragraphs
    "test get_screen_size"               test_get_screen_size
    "test subshell console codes"        test_subshell_console_codes
    "test in_cent_ivize"                 test_in_cent_ivize
)

declare STARTING_STTY

# Prepare console for appropriate behavior.
# First draft of function mainly saves the state (for later restoring)
# and hides the cursor.
 prepare_console()
{
    STARTING_STTY=$( stty -g )
    hide_cursor
}

# Restores the console from state saved in prepare_console()
restore_console()
{
    stty "$STARTING_STTY"
    show_cursor
}

##############
#    MAIN    #
##############

prepare_console
trap restore_console SIGINT
trap restore_console EXIT

lui_list_init "MAIN_MENU"

hide_cursor
main_menu
show_cursor

# leave cursor in expected column
echo

