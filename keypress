#!/usr/bin/env bash

# Simple implementation of a Yes/No prompt.
# Waits for either Y or N (either case), returning 0
# for 'Y' and 1 for 'N'.
get_yes_no()
{
    local keyp
    while true; do
        read -n1 -p"[Y]es or [N]o: " keyp
        if [ $? -eq 0 ]; then
            if [ "${keyp^^}" == "Y" ]; then
                echo
                return 0
            elif [ "${keyp^^}" == "N" ]; then
                echo
                return 1
            else
                echo -n "[2K[1G"  # erase line; move to leftmost (1) column
            fi
        fi
    done
}

# Waits for and returns single keypress, even if it is
# represented by multiple characters.
get_keypress()
{
    # IFS characters will be invisible to 'read', so:
    local IFS=''

    # Array to collect chars in case of multi-char keypress
    local -a chars=( )
    
    # Wait for a keypress (-n 1), save to array
    local keychar
    read -n 1 -s keychar
    chars=( "$keychar" )

    # Collect additional characters if available, especially for escape characters
    while read -t 0; do
        read -n 1 keychar
        chars=( "${chars[@]}" "$keychar" )
    done

    # empty IFS so array is joined without delimiters
    echo "${chars[*]}"
}


# Returns TRUE (0) if the needle character is in the haystack string.
str_contains_chr()
{
    local haystack="$1"
    local needle="$2"
    [ "${#needle}" -eq 1 ] && [ "${haystack//[^$needle]/}" ]
}


# Keep getting keystrokes until matching a character in the haystack.
# If a default parameter is included, typing ENTER will return the
# default character.
await_letter()
{
    local haystack="$1"
    local default="$2"

    local keystroke=$''
    while ! str_contains_chr "$haystack" "$keystroke"; do
        keystroke=$( get_keypress )
        if [ "$default" ] && [ "${#keystroke}" -eq 0 ]; then
           keystroke="$default"
           break
        elif [ "${#keystroke}" -gt 1 ]; then
            keystroke=$''
        fi
    done

    echo "$keystroke"
}

# Examples of possible get_keypress returns:

# Enter escape character in EMACS with C-q, ESC
# (see documentation: info emacs -n "Inserting Text")
declare keypress_down_arrow='[B'
declare keypress_up_arrow='[A'

# Other control characters can be tested with $'\c.':
declare keypress_ctrl_n=$'\cn'
declare keypress_ctrl_p=$'\cp'




# Demonstrate usage:

declare keystroke

echo "[32;1mBeginning test of key_keypress function.[m"
while [ "$keystroke" != "q" ]; do
    echo -n "Press any key to see how it's represented; q to quit. "
    keystroke=$( get_keypress )

    case "$keystroke" in
        "$keypress_down_arrow") echo "You pressed down-arrow" ;;
        "$keypress_up_arrow" )  echo "You pressed up arrow" ;;
        "$keypress_ctrl_n" )    echo "You pressed control-n" ;;
        "$keypress_ctrl_p" )    echo  "You pressed control-p" ;;
        *)
            if [ "${keystroke:0:1}" = "" ]; then
                keystroke="^[${keystroke:1}"
            fi
            echo "keystroke is [32m${keystroke}[m" ;;
    esac

done

echo
echo "[32;1mBeginning test of await_letter function.[m"
echo "await_letter will only return if the keypress matches a"
echo "a character in a submitted \"haystack\"  string.  An optional"
echo "second echo parameter will be returned if the user simply"
echo "presses ENTER."
echo
echo "In the following example, the haystack is \"YyNn\" and the"
echo "default response (for pressing ENTER) is \"n\".  Any other"
echo "keypresses will be ignored."
echo -n "Do you like pina coladas (y/N)? "
declare response=$( await_letter "YyNn" "n" )
echo
case "${response,,?}" in
    'y') echo "You like pina coladas." ;;
    'n') echo "You do NOT like pina coladas." ;;
esac
