#!/usr/bin/env bash

# Load appropriate sources even if script is a symlink:
declare -a SOURCES=( list_ui keypress small_stuff block_text )
declare SFOLDER=$( readlink -f "$0" ); SFOLDER="${SFOLDER%/*}"
declare source
for source in "${SOURCES[@]}"; do
    source "${SFOLDER}/$source"
done

declare FILE_COLOR=$'\e[48;5;4;1;38;5;15;1m'
declare FUNC_COLOR=$'\e[36;1m'
declare DEF_COLOR=$'\e[34;1m'
declare END_COLOR=$'\e[m'
declare RE_COMMENT='#( )?(.*))?'
declare RE_FUNC='^([[:alnum:]_]+\(\)).*$'

declare WRAP_DISABLE=$'\e[?7l'
declare WRAP_ENABLE=$'\e[?7h'

declare DESC_DELIM=$'\037'

declare FILENAME=


# @def entry_list
# 
# The entry_list is the compiled list of functions and definitions
# that contains information needed to show the contents of the list
# and to show the description upon an entry's selection.
#
# Columns
#    (string):       entry name
#    (string):       first description line
#    (packed_array): string with multiple lines delimited with $DESC_DELIM

# Statement into function to enable standard
set_app_window_title() { set_window_title "bashdox:  $FILENAME"; }




# Returns an entry list row, given a text array and the definition's index.
#
# Args
#    (name):     name of array in which to save the entry list row
#    (name):     name of array of lines from the target file
#    (integer):  index of line where the definition begins
parse_definition()
{
    local -n out_array="$1"
    local -n sf_list="$2"
    local -i line_number="$3"
    local -i top=$(( line_number+1 ))

    local line="${sf_list[$line_number]}"
    if ! [[ "$line" =~ ^#\ @def\ (.*)$ ]]; then
        echo "Couldn't parse definition line '$line'."
        exit 1
    fi

    local entry="${BASH_REMATCH[1]}"
    local -a desc_array=()

    local -i ndx="$top"
    while : ; do
        line="${sf_list[$ndx]}"
        if [ "${line:0:1}" != '#' ]; then
            break
        else
            if [[ "$line" =~ $RE_COMMENT ]]; then
                local desc="${BASH_REMATCH[2]}"
                if [[ "$desc" =~ ^[[:space:]]*$ ]]; then
                    if [ "${#desc_array[@]}" -gt 0 ]; then
                        desc_array+=( "" )
                    fi
                else
                    desc_array+=( "$desc" )
                fi
            fi
        fi
        (( ++ndx ))
    done

    local OIFS="$IFS"
    IFS="$DESC_DELIM"
    local desc="${desc_array[*]}"
    IFS="$OIFS"

    out_array=( "$entry" "${desc_array[0]}" "$desc" )
}

# Returns an entry list row, given a text array and the function's index.
#
# Args
#    (name):     name of array in which to save the entry list row
#    (name):     name of array of lines from the target file
#    (integer):  index of line where the function is defined
parse_function()
{
    local -n out_array="$1"
    local -n sf_list="$2"
    local -i ndx="$3"

    local func
    if [[ "${sf_list[$ndx]}" =~ $RE_FUNC ]]; then
        func="${BASH_REMATCH[1]}"
    else
        func="${sf_list[$ndx]}"
    fi

    local -a desc_array=()
    local line
    for (( i=ndx-1; i>0; --i )); do
        line="${sf_list[$i]}"
        if [[ "$line" =~ $RE_COMMENT ]]; then
            # Add to array in reverse-order since we're parsing in reverse
            desc_array=( "${BASH_REMATCH[2]}" "${desc_array[@]}" )
        else
            break
        fi
    done

    local OIFS="$IFS"
    local IFS="$DESC_DELIM"
    local desc="${desc_array[*]}"
    IFS="$OIFS"

    out_array=( "$func" "${desc_array[0]}" "$desc" )
}

# Generate lui_list of functions and definitions
#
# This function scans an array of lines from a text file, saving functions and
# definitions (a comment starting with '@def'), their line number and the line
# number where the attached description begins, if found.
#
# Args
#    (name):     name of array in which the lui_list will be generated
#    (name):     name of array of text file lines
parse()
{
    local array_name="$1"
    local file_lines_name="$2"
    local -n file_lines="$file_lines_name"

    local -n output_array="$array_name"
    local -i columns_count=3
    output_array=( "$columns_count" 0 )

    local -a list_line

    local line
    local -i ndx=0
    for line in "${file_lines[@]}"; do
        list_line=()

        if [[ "$line" =~ ^#\ *@def\  ]]; then
            parse_definition "list_line" "$file_lines_name" "$ndx"
        elif [[ "$line" =~ ^[[:alnum:]_]+\(\) ]]; then
            parse_function "list_line" "$file_lines_name" "$ndx"
        fi

        case "${#list_line[@]}" in
            "$columns_count" )
                output_array+=( "${list_line[@]}" ) ;;
            0 ) ;;
            * )
                echo "entry parsing column count mismatch." >&2
                exit 1
                ;;
        esac

        # if [ "${#list_line[@]}" -gt "$columns_count" ]; then
        (( ++ndx ))
    done
    return 0
}

# Custom line display function for lui_list_generic
# 
# Args
#    (integer):     flag: 1 line is indicated, 0 if not indicated
#    (integer):     maximum width of the display line
#    (various):     remaining arguments are columns of the display row
entry_display_line()
{
    local -i hilite="$1"
    local -i padding="$2"
    local -a els=( "${@:3}" )

    if [ "$hilite" -eq 0 ]; then
        echo -n "    "
    else
        echo -n ">>> "
    fi

    local -i chars_allowed=$(( padding - 4 ))

    local name="${els[0]}"
    local desc="${els[1]}"
    local color

    if [[ "$name" =~ .*\(\)$ ]]; then
        color="$FUNC_COLOR"
    else
        color="$DEF_COLOR"
        desc=
    fi

    echo -n "$color"

    if (( ${#name} < chars_allowed )); then
        echo -n "${name}${END_COLOR} "
        (( chars_allowed -= ( ${#name} + 1) ))

        if (( ${#desc} < chars_allowed )); then
            echo -n "$desc"
            dupchar $(( chars_allowed - ${#desc} )) ' '
        else
            echo -n "${desc:0:$chars_allowed}"
        fi
    else
        echo -n "${name:0:$chars_allowed}${END_COLOR}"
    fi

    echo  # emit newline
}

# key action function: display item commentary
# 
# Args
#    (string)      A character string representing the keypress that
#                  triggers this action
#    (name)        name of the current lui_list
#    (integer)     row number of the currently indicated lui_list row
#
# Returns
#     0 to continue
entry_show_details()
{
    local keyp="$1"
    local list_name="$2"
    local -i ndx="$3"
    local -a extras

    if [ "$#" -gt 3 ]; then
       extras=( "${@:4}" )
    fi

    local indent="   "

    local -i top count
    local entry_intro entry_type

    local -a row
    if lui_list_copy_row "row" "$list_name" "$ndx"; then
        local name="${row[0]}"

        # Break down the description
        local desc="${row[2]}"

        local -a lines

        if [ "$desc" ]; then
            local OIFS="$IFS"
            IFS="$DESC_DELIM"
            lines=( $desc )
            IFS="$OIFS"
        else
            lines=( "No description provided" )
        fi

        local color
        if [[ "$name" =~ .*\(\) ]]; then
            entry_intro="function $FUNC_COLOR"
            entry_type="function"
        else
            entry_intro="definition $DEF_COLOR"
            entry_type="definition"
        fi

        entry_intro="${entry_intro}${name}$END_COLOR from script ${FILE_COLOR}${FILENAME}$END_COLOR"
        lines=( "$entry_intro" " " "${lines[@]}" )

        reset_screen
        set_window_title "$FILENAME  ->   $name  ($entry_type)"
        block_text_display "lines"
        reset_screen
        set_app_window_title
    fi

    return 0
}


# Calls entry_show_details() triggered by CLI request for an entry.
#
# Args
#    (name):     name of lui_list of entries
#    (string):   name of desired entry
display_entry_by_value()
{
    local list_name="$1"
    local needle="$2"

    # default value 1 for not found
    local -i exit_val=1

    gebv_row()
    {
        local -i row_ndx="$1"
        local -a row=( "${@:2}" )
        local ename="${row[0]}"

        if [ "${row[0]}" == "$needle" ]; then
            entry_show_details "" "$list_name" "$row_ndx"

            exit_val=0
            # trigger early-termination
            return 1
        fi
        return 0
    }

    lui_list_iterate "$list_name" "gebv_row"

    return "$exit_val"
}





declare STARTING_STTY

# @def Screen preparation and restoration functions
# Grouped these functions for ease of matching prep and restore elements.
# The restore function will be attached to SIGINT and EXIT traps to make
# a best effort at restoring the console to the original state.

# Prepare console for appropriate behavior.
# First draft of function mainly saves the state (for later restoring)
# and hides the cursor.
prepare_console()
{
    STARTING_STTY=$( stty -g )
    hide_cursor
}

# Restores the console from state saved in prepare_console()
restore_console()
{
    stty "$STARTING_STTY"
    show_cursor
}

##############
#    Main    #
##############

main()
{
    local FILE="$1"
    local ENTRY="$2"
    local -a entry_list
    local -i selected
    local -i padding

    local -a main_lines_list

    local -a main_header
    bind_paragraphs "main_header" <<EOF
Showing functions and topics for script ${FILE_COLOR}$FILE${END_COLOR}.

The following list includes ${FUNC_COLOR}functions${END_COLOR} and
${DEF_COLOR}topic headings${END_COLOR}.  Move the selection with arrow
or page keys, read an entry by pressing ENTER.
EOF

    if mapfile -t main_lines_list < "$FILE"; then
        local -a main_keys_array=(
            $'\e|q:LUI_ABORT:Return from context'
            $'\n:entry_show_details:View topic'
        )

        if parse "entry_list" "main_lines_list"; then
            lui_list_init "entry_list" "${entry_list[0]}"

            reset_screen

            if [ "$ENTRY" ]; then
                display_entry_by_value "entry_list" "$ENTRY"
            else
                set_app_window_title

                local -a list_args=(
                    "selected"            # name of selection variable
                    "entry_list"          # name of entry list lui_list
                    0 0                   # allow lui_list_generic position interaction
                    20 80                 # rows and columns to be displayed
                    "entry_display_line"  # list display function
                    "main_keys_array"     # key action array
                    "main_header"         # array of paragraphs to display in header
                )

                lui_list_generic "${list_args[@]}"
            fi
        fi
    else
        echo "Unable to open entry."
    fi
}

if [ "$#" -lt 1 ]; then
    echo "Usage: bashinv <file_name>"
    exit 1
elif ! [ -e "$1" ]; then
    echo "File '$1' is not a proper file."
    exit 1
fi

prepare_console
trap restore_console SIGINT
trap restore_console EXIT

FILENAME="$1"
ENTRY="$2"

main "$FILENAME" "$ENTRY"

echo
