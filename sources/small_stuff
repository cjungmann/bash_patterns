#!/usr/bin/env bash

# shellcheck disable=SC2206 # don't warn about initializing arrays with unquoted variables.
# shellcheck disable=SC2059 # skip printf format variables warnings (it thinks $'\e' is a variable)
# shellcheck disable=SC2034 # "unused" nameref variables are read from in calling function

# @def Console-code screen functions
# These functions use console codes (see man console_codes) to
# set or read certain screen characteristics.

# Clear screen, cursor to origin
reset_screen() { echo -n "[2J[1;1H"; }

# Turn OFF console echo without regard to current echo setting
disable_echo() { stty -echo; }
# Turn ON console echo without regard to current echo setting
enable_echo()  { stty echo; }

# Disables default auto-wrap: discard characters that extend past
# the right of the screen.
disable_autowrap() { echo -n $'\e[?7l'; }

# Enables default auto-wrap: for character that would print past
# the right of the screen, continue printing on the next line.
enable_autowrap() { echo -n $'\e[?7h'; }

set_window_title() { echo -ne $'\e]2;'"$1"$'\a'; }

# @def Cursor manipulation
#
# The following functions hide, show, or move the cursor.  It
# includes the function get_screen_size() because it informs
# many cursor positioning decisions.

# Console-code that prevent display of cursor.
hide_cursor() { echo -n $'\e[?25l'; }
# Console-code that enables display of cursor.
show_cursor() { echo -n $'\e[?25h'; }

# Returns rows and columns size of screen in nameref variables.
#
# WARNING/NOTE: won't work in subshell.  See get_cursor_position().
#
# Args
#    (string):  name of variable for rows value
#    (string):  name of variable for columns value
get_screen_size()
{
    local -i csave rsave
    get_cursor_position "rsave" "csave"
    set_cursor_position 999 999
    get_cursor_position "$1" "$2"
    set_cursor_position "$rsave" "$csave"
}

# Get the current cursor position from the terminal, returning the
# values in nameref variables
#
# WARNING/NOTE: this function will not work in a subshell because
# the console response to stdout will be redirected before we can
# read it.
#
# Args
#    (string):   name of rows variable
#    (string):   name of columns variable
get_cursor_position()
{
    local -n gcp_rows="$1"
    local -n gcp_cols="$2"

    local reply

    read -sr -dR -p $'\e[6n' REPLY

    local IFS=';'
    local -a arr
    REPLY="${REPLY#*[}"
    arr=( $REPLY )

    # # discard any pending keypresses
    # while read -t 0; do
    #     read -srN1
    # done

    gcp_rows="${arr[0]}"
    gcp_cols="${arr[1]}"
}


# Move the cursor to specified screen location
#
# Args
#    (integer):    row number
#    (integer):    column number
set_cursor_position()
{
    local -i row="${1:-1}"
    local -i col="${2:-1}"

    if [ "$col" -lt 0 -o "$row" -lt 0 ]; then
        echo "Unexpected missing parameter!" >&2
        exit 1
    fi

    printf $'\e['"${row};${col}H"
}

# Move cursor to specified column of current row.
set_cursor_column() { echo -en $'\e['"${1}G"; }

# @def Conversion functions

# shellcheck disable=SC2046,SC2059  # quiet printf scolding

# Returns ASCII character when given an integer value.
char_from_val() { printf $(printf "\\%03o" "$1"); }
# Returns an integer value associated with an ASCII character
val_from_char() { LC_CTYPE=C; printf '%d' "'$1"; }


# @def String search functions

# Gets 0-based character position in first string of the first
# occurance of the second string
# Args
#   (string):    haystack, string to be searched
#   (string):    needle, substring to be sought in haystack
#
# Returns
#    echos integer position of needle in haystack
#    *true* if substring found
#    *false* if not found
strstrndx()
{
    local -i len1="${#1}"
    local sub="${1#*$2}"
    local -i sublen="${#sub}"
    if [ "$len1" -eq "$sublen" ]; then
        echo -1
        return 1
    fi

    echo $(( len1 - sublen - "${#2}" ))
    return 0
}

# Returns print length of string, having subtracted CSI values from total characters.
#
# Args
#    (string):    string for which the count is needed
#
# Returns
#    (echo) printed length of string
string_len_sans_csi()
{
    local raw="$1"
    local rawlen="${#raw}"
    local c
    local in_esc=0
    local in_csi=0
    local count=0
    for (( i=0; i<rawlen; ++i )); do
        c="${raw:$i:1}"

        if (( in_csi )); then
            # CSI strings terminate with letter,
            # or ']' (linux private CSI sequences)
            # or '`' (HPA cursor placement instruction)
            if [[ "$c" =~ [\]\`[:alpha:]] ]]; then
                (( in_csi = in_esc = 0 ))
            fi
        elif (( in_esc == 1 )); then
            if [ "$c" == '[' ]; then
                in_csi=1
            else
                echo "Oops: escape followed by non-'[' character ($c)" >&2
                exit 1
            fi
        elif [ "$c" == $'\e' ]; then
            in_esc=1
        else
            (( ++count ));
        fi
    done

    echo "$count"
}

# 'Echo's the first character that follows the first
# underscore in the string and returns TRUE (0).
# If there is no underscore+character in the string,
# the function returns FALSE (!0)
# Args
#    (string):    string in which the letter following an underscore
#                 is sought and echoed.
get_hilite_char()
{
    local str="$1"
    local -i pos
    if pos=$( strstrndx "$str" '_' ); then
        echo "${str:$((pos+1)):1}"
        return 0
    else
        return 1
    fi
}

# @def Output functions
# 
# Various simple functions making common needs to be convenient.

# Function to duplicate a character a given number of times
# Args
#    (integer):   number of characters to repeat
#    (character): character to be repeated
# shellcheck disable=2155  # ignore 'declare and assign separately' warning
dupchar()
{
    if [ "$1" -gt 0 ]; then
        local s=$( printf "%0${1}d" 0 )
        echo -n "${s//0/$2}"
    fi
}

# Print string with ESCAPE and NEWLINE characters replaced by \e and \n
#
# Args
#    (string):   keystroke key
print_keystroke()
{
    local keyp="${1///\\e}"
    keyp="${keyp///\\n}"
    keyp="${keyp//	/\\t}"
    echo -n "$keyp"
}

# Prints an array of text lines to a given location
#
# Args
#    (name):     name of simple array of text strings
#    (integer):  row at which to start printing
#    (integer):  column from which all text should print
indent_print()
{
    local -n ip_lines="$1"
    local -i row="$2"
    local -i col="$3"

    set_cursor_position "$row" "$col"

    for line in "${ip_lines[@]}"; do
        echo "$line"
        echo -n $'\e['"${col}G"
    done
}

# This variable can be changed in a calling script to set a different default.
# Consult `man console_colors` for color-setting instructions.
declare SS_HILITE_COLOR="36;1"

# Find and hilite substring in string (if found)
# Args
#    (string):   string to print
#    (string):   substring for which the color should be changed
#    (string):   optional color string to use when coloring the substring
hilite_substr()
{
    local str="$1"
    local substr="$2"
    local color="${3:-$SS_HILITE_COLOR}"
    local -i pos
    if pos=$( strstrndx "$str", "$substr" ); then
        local -i lensub="${#substr}"

        echo -n "${str:0:$((pos))}"
        echo -n $'\e['"${color}m${substr}"$'\e[m'
        echo -n "${str:$((pos+lensub))}"
    fi
}

# Print a string, hilighting the character following the first
# underscore, and adding optionally padding to a requested length.
# Args
#    (string):    string to print
#    (integer):   total characters to print, with spaces filling
#                 positions unfilled with the string.  Negative
#                 values will pad to the left.
#    (string):    ANSI color string (without '\e[' prefix or 'm' suffix,
#                 they will be added when written out).
#                 NOTE: quote strings that include semicolons or the
#                 first semicolon will terminate the string.
hilite_pad()
{
    local str="$1"
    local -i pad="$2"
    local -i absolute_pad="${pad#-}"
    local -i len="${#1}"
    local color="${3:-$SS_HILITE_COLOR}"

    local -i pos
    if pos=$( strstrndx "$str" '_' ); then
        (( --len ))
        if [ "$pad" -lt 0 ]; then
            dupchar $(( absolute_pad - len )) ' '
        fi
        echo -n "${str:0:$((pos))}"
        echo -n $'\e7'                # save attributes and cursor position (mainly interested in color)
        echo -n $'\e['"${color}m"     # hilight color
        echo -n "${str:$((++pos)):1}" # hilighted character
        echo -n $'\e8\e[1C'           # restore saved stuff, advance cursor
        echo -n "${str:$((++pos))}"   # print remainder of string
    else
        if [ "$pad" -lt 0 ]; then
            dupchar $(( absolute_pad - len )) ' '
        fi
        echo -n "$str"
    fi

    if [ "$pad" -gt 0 ]; then
        dupchar $(( absolute_pad - len )) ' '
    fi
}




# Prints string exactly the length of $2.
#
# Short strings are supplemented with extra spaces,
# long strings are truncated.
#
# Args
#    (string)   string to be printed
#    (integer)  number of characters to print
force_length()
{
    local str="$1"
    local -i len="$2"

    local -i needed=$(( len - "${#str}" ))
    if [ "$needed" -gt 0 ]; then
        str="$str"$( dupchar "$needed" " " )
    else
        str="${str:0:$len}"
    fi

    echo -n "$str"
}

# @def Paragraph formatting functions
#
# One function, bind_paragraphs(), scans text to group paragraphs,
# and another, format_paragraphs(), splits the bound paragraphs
# into length-limited lines.
#
# The functions are designed to work together to present a nicely
# formatted text display.
#
#    # create an array of paragraphs from a text file:
#    local -a paras
#    bind_paragraphs "paras" < "text.txt"
#
#    # convert the paragraphs into a length-constrained array of text lines:
#    local -a lines
#    format_paragraphs "lines" "paras" 60
#
#    # Directly print the lines, or use a 'block_text' script function:
#    block_text_display "lines"
#
#    This section also includes support function format_paragraph().  This
#    function is called by format_paragraphs() for each paragraph line and
#    is not meant for to be called directly.



# Parses text to make an array of single-line paragraphs.
#
# Consecutive text lines will be combined into a single line, when a text line
# is separated from its neighbor by an empty line (i.e. two consecutive newlines),
# the next line will start a new paragraph.
#
# Use this function to prepare text for formatting in function format_paragraphs().
#
# The input of the function is *stdin*.  One way to use it could be:
#    local -a PARAS=()
#    bind_paragraphs "PARAS" < "text.txt"
#
# or:
#    local -a PARAS=()
#    bind_paragraphs "PARAS" <<EOF
#    Sample Text, paragraph 1
#
#    Sample Text, paragraph 2
#    EOF
#
# Args
#    (name):     name of array in which the comiled lines should be stored.
bind_paragraphs()
{
    local -n output="$1"
    output=()

    local datext
    local -a lines=()
    local IFS=' '

    while IFS= read -r datext; do
        if [ -z "$datext" ]; then
            output+=( "${lines[*]}" )
            lines=()
        else
            lines+=( $datext )
        fi
    done

    output+=( "${lines[*]}" )
}

# Splits a submitted string of words into as many lines as necessary
# to fit within the width constraints.
#
# Args
#    (name):        nameref of array to hold resulting lines
#    (string):      The line/paragraph to be printed
#    (integer):     Number of characters allowed per line
#    (integer):     Number of characters to indent the first line
#                   of a paragraph
format_paragraph()
{
    local IFS=' '

    local -n fp_lines="$1"
    local -a words=( $2 )
    local -i line_width="$3"
    local -i para_indent="$4"

    local indent
    indent=$( dupchar "$para_indent" ' ' )

    local word
    local -a line=( )
    local -i wordlen
    local -i linelen="$para_indent"

    fp_lines=()

    for word in "${words[@]}"; do
        wordlen=$( string_len_sans_csi "$word" )
        # wordlen="${#word}"
        if [ "${#indent}" -gt 0 ]; then
            line=( "${indent}$word" )
            (( linelen = para_indent + wordlen ))
            indent=""
        elif (( wordlen + linelen >= line_width )); then
            fp_lines+=( "${line[*]}" )
            line=( "$word" )
            (( linelen = wordlen ))
        else
            line+=( "$word" )
            (( linelen += wordlen + 1 ))
        fi
    done
    if [ "${#line[*]}" -gt 0 ]; then
        fp_lines+=( "${line[*]}" )
    fi
}

# Breaks paragraphs into an array of length-limited lines
#
# Args
#    (name):      name of array in which formatted lines will be returned
#    (name):      name of array in which source paragraphs will be read
#    (integer):   maximum line length for output lines
#    (integer):   number of characters to indent paragraphs.  If this value
#                 is 0 (or omitted), an empty line will indicate new
#                 paragraphs.  If this value is greated than 0, each
#                 paragraph will be indented this number of characters and
#                 the paragraphs will NOT be separated by empty lines.
format_paragraphs()
{
    local -n fps_output="$1"
    local -n fps_paras="$2"
    local -i width="$3"
    local -i para_indent="$4"

    fps_output=()

    local -a fps_lines
    local para
    local -i count=0
    for para in "${fps_paras[@]}"; do
        if (( count++ > 0 && para_indent == 0 )); then
            fps_output+=( "" )
        fi
        format_paragraph "fps_lines" "$para" "$width" "$para_indent"
        fps_output+=( "${fps_lines[@]}" )
    done
}

# @def Variable Validation Functions
#
# In an effort to shorten debugging time by identifying problems
# with function arguments, these functions aim to verify the
# existence and types of variables, especially variable names
# to be used as nameref variables.
#
# I justify the use of Bash-only tests because this is
# 'bash_patterns', and much of this set of scripts are
# dependent on Bash arrays and other Bash-specific stuff.

# Tests if named variable has been declared
#
# Args
#    (name):   name of variable to test
named_var_exists() { declare -p "$1" &>/dev/null; }

# Tests if a named variable is of a given type
#
# Args
#    (name):      name of variable to test
#    (character): letter of declare type: 'a' for array, 'i' for int
named_var_is_type()
{
    if named_var_exists "$1"; then
        local type="-$2"
        local result
        if result=$( declare -p "$1" ); then
            if [ "${result:8:2}" == "$type" ]; then
                return 0
            fi
        fi
    fi

    return 1
}


# Recursively resolves nameref variables back to non-nameref variable
# 
# Args
#    (name):   name of variable to discern
original_var_name()
{
    local str=$( declare -p "$1" 2>/dev/null )
    if [ "${str:8:2}" == "-n" ]; then
        if [[ "$str" =~ =\"([^\"]+)\" ]]; then
            original_var_name "${BASH_REMATCH[1]}"
        else
            echo "Failed to match the '$str'" >&2
            to_continue
        fi
    else
        echo "$1"
    fi
}

# Alias for named_var_is_type $1 'i'
named_var_is_int()
{
    local n=$( original_var_name "$1" );
    named_var_is_type "$n" "i";
}

# Alias for named_var_is_type $1 'a'
named_var_is_array()
{
    local n=$( original_var_name "$1" );
    named_var_is_type "$n" "a";
}

# Indicates if a given name is a function
named_var_is_function() { [ $( type -t "$1" ) == "function" ]; }


# @def Miscellaneous Stuff
#
# The following functions don't fit in neat categotries.

# Returns row count and maximum line length from a simple array
#
# Args
#    (name):    name of variable in which row count is returned
#    (name):    name of variable in which maximum line length is returned
#    (name):    name of simple array to be evaluated
get_string_array_extent()
{
    local -n gsae_rows="$1"
    local -n gsae_cols="$2"
    local -n gsae_lines="$3"

    gsae_rows="${#gsae_lines[@]}"
    gsae_cols=0

    local line
    local -i curlen
    for line in "${gsae_lines[@]}"; do
        curlen="${#line}"
        (( gsae_cols = ( curlen > gsae_cols ) ? curlen : gsae_cols ))
    done
}

# Returns row/column value to center a defined area
#
# Args
#    (name):    row value variable name
#    (name):    column value variable name
#    (name);    number of rows in region to be centered
#    (name);    number of columns in region to be centered
#    (name):    optional array name whose extent is to be used
#               for the rows and columns values
get_block_centering_values()
{
    local -n gcrc_row="$1"
    local -n gcrc_col="$2"
    local -n gcrc_rows="$3"
    local -n gcrc_cols="$4"

    if [ "$#" -gt 4 ]; then
        local -i lrows lcols
        get_string_array_extent "lrows" "lcols" "$5"

        (( gcrc_rows = ( gcrc_rows==0 ? lrows : gcrc_rows ) ))
        (( gcrc_cols = ( gcrc_cols==0 ? lcols : gcrc_cols ) ))
    fi

    local -i srows scols
    get_screen_size "srows" "scols"

    (( gcrc_row = ( srows - gcrc_rows ) / 2 ))
    (( gcrc_col = ( scols - gcrc_cols ) / 2 ))
}

# Get set or unset (-s or -u) for a shopt option.
#
# Use this function to preserve the state in order to
# restore it after a local shopt setting.
#
# Args
#    (string): shopt option to query
get_shopt_setting()
{
    local opt="$1"
    if [[ $( shopt -p "$opt" ) =~ -([us]) ]]; then
        echo "${BASH_REMATCH[1]}"
        return 0
    fi

    return 1
}

# Silently test if a builtin script function exists
#
# Rather than check for a version number or something else,
# it may be better to simply confirm that a function works.
#
# Args
#    (name):    name of builtin function to be sought
test_builtin() { help "$1" > /dev/null 2>&1; }


in_subshell() { [ "$$" -ne "$BASHPID" ]; }
