#!/usr/bin/env bash

source sources/include

to_continue() { read -n1 -p Press\ any\ key\ to\ continue. >&2; }

declare -a CURRENCY_ARRAY


test_get_time_in_tenthous()
{
    local -i thous thous_end
    local -i seconds_to_wait
    local -i limit=10
    local floater
    for (( i=0;  i < limit; ++i )); do
        thous=$( get_time_in_tenthous )
        floater=$( show_tenthous_as_floating_seconds "$thous" )
        printf "test %d of %d: thous is %d, floater is %s\n" $(( i+1 )) "$limit" "$thous" "$floater"
        seconds_to_wait=$(( 1 + $RANDOM % 5 ))
        printf "   ...waiting %d seconds to rerun test.\n" "$seconds_to_wait"
        sleep "$seconds_to_wait"
        thous_end=$( get_time_in_tenthous )
        echo "      Elapsed sleep time was "$( show_tenthous_as_floating_seconds $(( thous_end - thous )) )
    done
    to_continue
}

# @def Terminal State restoration code
#
# Use a global variable (STARTING_STTY) to save the state, then set
# traps to restore the state.
declare STARTING_STTY

# Save state and hide cursor upon entry to program
prepare_console()
{
    STARTING_STTY=$( stty -g )
    hide_cursor
}

# Restores the console from state saved in prepare_console()
restore_console()
{
    stty "$STARTING_STTY"
    show_cursor
    # leave cursor in expected left-most column
    echo
}

###########################
#          MAIN           #
#  Execution Begins Here  #
###########################

test_tenthous_as_floating()
{
    local -a vals=(
        100500
        500000
        611000
        37610100
        36610010
        863990001
    )

    local val
    for val in "${vals[@]}"; do
        echo "Converting $val to time since midnight."
        show_tenthous_as_floating_seconds "$val"
    done

    to_continue
}

# Short cut to run standalone test scripts
#
# Args
#    (string):  script name (assumed to be in speed_test.d directory)
#    (string):  name of main function in script
run_directory_test()
{
    local path="speed_tests.d/$1"
    local funcname="$2"

    if [ -f "$path" ]; then
        source "$path"
        "$funcname"
    else
        echo "failed to find directory '$path'"
    fi
}

run_subshell_vs_nameref() { run_directory_test "subshell_nameref" "sn_subshell_vs_nameref"; }
run_array_appends()       { run_directory_test "array_appends" "aa_run_array_race"; }
run_in_cent_ivize()       { run_directory_test "in_cent_ivize" "ivc_main"; }
run_string_len_sans()     { run_directory_test "string_len_sans_csi" "string_len_sans_csi_main"; }
run_commaizers()          { run_directory_test "commaizers" "commaizers_main"; }
run_array_retrievers()    { run_directory_test "array_table_row_retrieve" "array_retrieve_test_main"; }
run_char_iterators()      { run_directory_test "char_iterators" "char_iterators_main"; }

prepare_console
trap restore_console SIGINT
trap restore_console EXIT

declare -a MAIN_MENU=(
    2 0
    "get_time_in_tenthous test"      test_get_time_in_tenthous
    "test show_tenthous_as_floating" test_tenthous_as_floating
    "run subshell_vs_nameref"        run_subshell_vs_nameref
    "run append to array tests"      run_array_appends
    "currency evaluation methods"    run_in_cent_ivize
    "run string_len_sans_csi_tests"  run_string_len_sans
    "run commaizers test"            run_commaizers
    "run array_retrievers_test"      run_array_retrievers
    "run char iterators test"        run_char_iterators
)
lui_list_init "MAIN_MENU"

lui_list_runner "MAIN_MENU"



