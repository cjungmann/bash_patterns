#!/usr/bin/env bash

source list_ui
source keypress
source small_stuff
source cocolors

declare -a MYLIST=(
    2
    0
    _alphabet         collection\ of\ letters
    u_buntu           operating\ system
    a_ccurate         description\ of\ correctness
    up_date           temporal\ repair
    supercalifra_gilisticexpialadocious exclamation
)
lui_list_init "MYLIST"

declare -a LONGLIST=(
    1 0
    "one" "two" "three" "four" "five" "six" "seven" "eight" "nine"

    "ten" "eleven" "twelve" "thirteen" "fourteen"
    "fifteen" "sixteen" "seventeen" "eighteen" "nineteen"

    "twenty" "twenty-one" "twenty-two" "twenty-three" "twenty-four"
    "twenty-five" "twenty-six" "twenty-seven" "twenty-eight" "twenty-nine"

    "thirty" "thirty-one" "thirty-two" "thirty-three" "thirty-four"
    "thirty-five" "thirty-six" "thirty-seven" "thirty-eight" "thirty-nine"

    "forty" "forty-one" "forty-two" "forty-three" "forty-four"
    "forty-five" "forty-six" "forty-seven" "forty-eight" "forty-nine"

    "fifty"
)
lui_list_init "LONGLIST"

to_continue() { read -n1 -p $'\nPress any key to continue.'; }
to_return() { read -n1 -p $'\nPress any key to return to the main menu.'; }

# This is not a test, but rather a function that displays the contents
# of a lui_list.
test_dump_list()
{
    local -n tdl_list="$1"
    local -i cols="${tdl_list[0]}"
    local -i rows="${tdl_list[1]}"
    echo "$rows rows of $cols columns."

    local -a row=()
    local el
    local -i count=0

    local OIFS="$IFS"
    local IFS='|'
    for el in "${tdl_list[@]:2}"; do
        row+=( "$el" )
        if [ "${#row[@]}" -eq "$cols" ]; then
            (( ++count ))
            echo "row ${count}: ${row[*]}"
            row=()
        fi
    done
    IFS="$OIFS"
}

test_padding()
{
    reset_screen
    local -i padding=$( lui_list_max_len "MYLIST" )
    local -a lrow
    local -i rows
    lui_list_row_count "rows" "MYLIST"
    for (( ndx=0; ndx<rows; ++ndx )); do
        lui_list_copy_row "lrow" "MYLIST" "$ndx"
        echo -n $'\e[45m'
        hilite_pad "${lrow[0]}" "$padding"
        echo $'\e[m'
    done

    to_return
}

# Creates a proper lui_list array with the contents of the LS_COLORS
# environment variable.  The resulting array will include the row
# count element, so it will not be necessary to call lui_list_init
# This function can also add empty elements per row, if requested.
# The resulting
# Args
#    (string):    name of in/out array that will contain the lui_list
#                 array when the function is finished.
#    (integer);   optional number of elements to add to each row
create_ls_colors_array()
{
    if [ ! "$LS_COLORS" ]; then
        echo "No LS_COLORS to work with, aborting."
        exit 1
    fi

    local -n ilca_list="$1"

    local -i columns="${2:-2}"
    # Prevent irrational column count
    if [ "$columns" -lt 2 ]; then
        columns=2
    fi

    ilca_list=( "$columns" 0 )

    local IFS=':'
    local -a raw_list=( $LS_COLORS )

    local -a row
    local item
    local IFS="="
    local -i row_count=0
    for item in "${raw_list[@]}"; do
        row=( $item )
        for (( i=2; i<columns; ++i )); do
            row+=( 0 )
        done

        (( ++row_count ))
        ilca_list+=( "${row[@]}" )
    done

    ilca_list[1]="$row_count"
}

ls_colors_line_displayer()
{
    local -i hilite="$1"
    local -i padding="$2"
    local -a els=( "${@:3}" )

    if (( hilite == 1 )); then
        echo -n ">>> "
    else
        echo -n "    "
    fi

    local name="${els[0]}"
    local color="${els[1]}"

    # Calculate size without CSI sequences
    local -i cumlen=6   # a single character margin, left and right plus 4 character indicator
    local -i spaces_needed
    (( spaces_needed = padding  - cumlen - "${#name}" ))
    local spaces=$( dupchar "$spaces_needed" ' ' )

    echo -n $'\e['"${color}m $name "$'\e[m'
    echo "$spaces"
}

test_ls_colors()
{
    local -a list_colors
    create_ls_colors_array "list_colors" 3

    local -i selection=0

    local list_args=(
        "selection"                # name of selection variable
        "list_colors"              # name of lui_list
        0 0                        # row, column to zero to trigger centering
        20                         # size of list in lines (ysize)
        80                         # size of list in characters (xsize)
        "ls_colors_line_displayer" # name of line display function
    )

    if lui_list_generic "${list_args[@]}"; then
        local -a row
        if ! lui_list_copy_row "row" "list_colors" "$selection"; then
            echo "The attempt to access line number $selection caused a failure."
            exit 1
        fi

        echo "You selected index $selection, which looks "$'\e['"${row[1]}mlike this"$'\e[m'
    fi

    to_continue
}

test_generic_menu()
{
    echo "This test shows an explicit placement of a lui_list display."

    local -a list_menu=( 1 0 File Edit View Tools Help )
    lui_list_init "list_menu" 1

    local -i selection=0
    local -i rows
    lui_list_row_count "rows" "list_menu"

    local -i maxlen=$( lui_list_max_len "list_menu" )

    local list_args=(
        "selection"           # name of selection variable
        "list_menu"           # name of lui_list
        20 20                 # row, column
        "$rows"               # size of list in lines (rows)
        "$maxlen"             # size of list in characters (columns)
    )

    reset_screen
    echo "This is a test of the generic menu.  I'm gonna shift its"
    echo "position a bit by leaving the cursor in position."

    lui_list_generic "${list_args[@]}"
    local -i ecode="$?"
    if [ "$ecode" -eq 0 ]; then
        echo "You selected '${list_menu[$selection]}'"
        to_continue
    fi
}

test_simple_menu()
{
    local -i selected_index

    if lui_list_menu "selected_index" "MYLIST"; then
        echo "You selected index $selected_index"
    else
        echo "You cancelled the selection."
    fi
}

test_custom_menu()
{
    local -i tcm_selected=0

    tcm_display_line()
    {
        local -i hilite="$1"
        local -i padding="$2"
        local -a row=( "${@:3}" )

        if [ "$hilite" -ne 0 ]; then echo -n $'\e[43m'; fi
        hilite_pad "${row[0]}" "$padding"
        echo $'\e[m'
    }

    local -i maxlen=$( lui_list_max_len "MYLIST" )

    lui_list_generic "tcm_selected" "MYLIST" 0 0 10 "$maxlen" "tcm_display_line"

    echo "You selected item index $tcm_selected."
    to_continue
}

report_selection()
{
    local -n sel_list="$1"
    local -i rows
    lui_list_row_count "rows" "$1"
    local -a selections=()
    local -a row
    for (( ndx=0; ndx < rows; ++ndx )); do
        if lui_list_copy_row "row" "$1" "$ndx"; then
            if [ "${row[1]}" -ne 0 ]; then
                selections+=( "${row[0]}" )
            fi
        fi
    done

    if [ "${#selections[@]}" -eq 0 ]; then
        echo "You made no selections."
    else
        local sel
        echo -n "You made ${#selections[@]} selections: ${selections[0]}"
        for sel in "${selections[@]:1}"; do
            echo -n ", $sel"
        done
        echo "."
    fi
}

test_radio_list()
{
    local -a rawlist=( black red green brown blue magenta cyan white )
    local -a clist

    lui_list_convert "clist" "rawlist" 1 2

    if lui_list_radio "clist"; then
        report_selection "clist"
    else
        echo "Terminate radio without selection"
    fi

    to_continue
}

test_checkbox_list()
{
    local -a rawlist=( black red green brown blue magenta cyan white )
    local -a clist

    lui_list_convert "clist" "rawlist" 1 2

    if lui_list_checkbox "clist"; then
        report_selection "clist"
    else
        echo "Terminate checkbox without selection"
    fi

    to_continue
}


# Called by test_edit_ls_colors()
test_generic_edit_color()
{
    local keyp="$1"
    local list_name="$2"
    local -i row_number="$3"

    local -a row
    if lui_list_copy_row "row" "$list_name" "$row_number"; then
        local lcolor="${row[1]}"
        if edit_color "lcolor"; then
            row[1]="$lcolor"
            lui_list_replace_row "$list_name" "row" "$row_number"
        fi
    else
        echo "Error with lui_list_copy_row." >&2
        read -sn1
    fi
    return 0
}

test_edit_ls_colors()
{
    local -a list_colors
    create_ls_colors_array "list_colors" 3

    local -a term_keys=(
        $'\e'"|q:LUI_ABORT"
        $'\n'":test_generic_edit_color"
    )

    local -i selection=0

    local -a list_args=(
        "selection"
        "list_colors"
        1 1
        10 40
        "ls_colors_line_displayer"
        "term_keys"
        )

    lui_list_generic "${list_args[@]}"
    if [ "$?" -eq 0 ]; then
        echo "You selected $selection"
    else
        echo "You aborted"
    fi
}

test_screen_position()
{
    reset_screen
    echo "This is a test of the screen position."
    echo -n "    "
    local -i row col
    get_cursor_position "row" "col"
    echo "The position is col=$row col=$col"

    to_continue

    reset_screen

    echo "This is the start of a new test"

    set_cursor_position 1 1
    echo "1"
    set_cursor_position 2 2
    echo "2"
    set_cursor_position 3 3
    echo "3"
    set_cursor_position 4 4
    echo "4"

    to_return
}

test_lui_list_max_len()
{
    local listname="MAIN_MENU"
    local -i maxlen
    maxlen=$( lui_list_max_len "$listname" )

    echo "This tests a generic max length function that uses"
    echo "compares the first column of the rows of a lui_list."
    echo

    echo "The max length of $listname is $maxlen"
    to_continue
}

##############
#    Main    #
##############

declare -a MAIN_MENU=(
    2 0
    "test padding"          test_padding
    "test ls_colors"        test_ls_colors
    "test generic menu"     test_generic_menu
    "test simple menu"      test_simple_menu
    "test edit ls_colors"   test_edit_ls_colors

    "test custom menu"      test_custom_menu
    "test radio list"       test_radio_list
    "test checkbox list"    test_checkbox_list
    "test_screen_position"  test_screen_position
    "test lui_list_max_len" test_lui_list_max_len
    )

lui_list_init "MAIN_MENU"

main_menu()
{
    run_test()
    {
        local -a row=()
        lui_list_copy_row "row" "$2" "$3"

        reset_screen

        # Execute the command
        "${row[1]}"

        reset_screen

        return 0
    }

    local -a keylist=(
        $'\e|q:LUI_ABORT'
        $'\n:run_test'
    )

    local -i selected=0
    local -i maxlen=$( lui_list_max_len "MAIN_MENU" )

    local list_args=(
        "selection"           # name of selection variable
        "MAIN_MENU"           # name of lui_list
        0 0                   # row, column to zero for centering
        "${#MAIN_MENU[@]}"    # size of list in lines (rows)
        "$maxlen"             # size of list in characters (columns)
        ""                    # use default line displayer
        "keylist"             # name of keystroke functions list
    )

    reset_screen
    lui_list_generic "${list_args[@]}"
}

# Prepare console for appropriate behavior.
# First draft of function mainly saves the state (for later restoring)
# and hides the cursor.
prepare_console()
{
    STARTING_STTY=$( stty -g )
    hide_cursor
}

# Restores the console from state saved in prepare_console()
restore_console()
{
    stty "$STARTING_STTY"
    show_cursor
}

prepare_console
trap restore_console SIGINT
trap restore_console EXIT

hide_cursor
main_menu
show_cursor

# leave cursor in expected column
echo

